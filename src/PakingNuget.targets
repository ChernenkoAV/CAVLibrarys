<Project>

    <PropertyGroup>
        <GenerateSerializationAssemblies>Off</GenerateSerializationAssemblies>
        <GeneratePackageOnBuild>false</GeneratePackageOnBuild>
        <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
        <WarningLevel>5</WarningLevel>
        <WarningsAsErrors />
        <GenerateDocumentationFile>true</GenerateDocumentationFile>
        <GenerateAssemblyInfo>false</GenerateAssemblyInfo>
        <Deterministic>false</Deterministic>
        <Optimize>true</Optimize>
        <DebugType>pdbonly</DebugType>
        <AppendTargetFrameworkToOutputPath>false</AppendTargetFrameworkToOutputPath>
        <AppendRuntimeIdentifierToOutputPath>false</AppendRuntimeIdentifierToOutputPath>
        <DocumentationFile>$(OutputPath)\$(AssemblyName).xml</DocumentationFile>
        <AnalysisMode>AllEnabledByDefault</AnalysisMode>
        <PaketIcon>$(SolutionDir)..\ppr.png</PaketIcon>
    </PropertyGroup>

    <ItemGroup>
        <PackageReference Include="NuGet.CommandLine" Version="5.11.0">
            <PrivateAssets>all</PrivateAssets>
        </PackageReference>
    </ItemGroup>

    <UsingTask TaskName="CreateVersions"
         TaskFactory="CodeTaskFactory"
         AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll" >
        <ParameterGroup>
            <AssemblyName ParameterType="System.String" Required="true"/>
            <ProjectName ParameterType="System.String" Required="true"/>
            <TempBuildDir ParameterType="System.String" Required="true"/>
            <ProjectDir ParameterType="System.String" Required="true"/>
            <IconPath ParameterType="System.String" Required="true"/>

            <ProductVersion ParameterType="System.String" Output="true"/>
            <VerAssembly ParameterType="System.String" Output="true"/>
            <VerFile ParameterType="System.String" Output="true"/>

            <NewNuspecFile ParameterType="System.String" Output="true"/>
            <DescriptionFromNuspec ParameterType="System.String" Output="true"/>
        </ParameterGroup>
        <Task>
            <Reference Include="System.Xml"/>
            <Reference Include="System.Xml.Linq"/>

            <Using Namespace="System.IO"/>
            <Using Namespace="System.Xml.Linq"/>
            <Using Namespace="System.Text.RegularExpressions"/>
            <Using Namespace="System.Linq"/>
            <Code Type="Fragment" Language="cs">
                <![CDATA[

                var verFile = Path.Combine(ProjectDir, ".packVersion");
                var nuspecFile = Path.Combine(ProjectDir, AssemblyName + ".nuspec");

                if (!File.Exists(verFile))
                {
                    Log.LogError("Отсутвует файл '.packVersion' в корне проекта");
                    return false;
                }

                if (!File.Exists(nuspecFile))
                {
                    Log.LogError("Отсутвует файл '"+AssemblyName + ".nuspec' в корне проекта");
                    return false;
                }

                var packData = File.ReadAllText(verFile);

                if (String.IsNullOrWhiteSpace (packData) || packData.Split(new string[] {"\n"}, StringSplitOptions.None).Length != 1)
                {
                    Log.LogError("Файл " + verFile + " не корректно заполнен. \nДолжна быть одна строка без перевода каретки с указанием версии пакета. \nРекомендуется использовать семвер (semver.org).");
                    return false;
                }

                if(!(new Regex(@"^\d+\.\d+\.\d+(|-\S+)$").IsMatch(packData)))
                {
                    Log.LogError("Некорректный формат версии. Для отделения пререлиза используйте дефис");
                    return false;
                }

                ProductVersion = packData;
                VerAssembly = ProductVersion.Split(new char[] {'.'}, StringSplitOptions.None)[0];
                VerFile = VerAssembly + DateTime.Now.ToString(".yyyy.MM.dd");

                VerAssembly = VerAssembly == "0" ? VerAssembly + ".1" : VerAssembly + ".0";
                VerAssembly = VerAssembly +".0.0";
                

                var nusp = XDocument.Load(nuspecFile);

                var descrNode = nusp.Descendants().FirstOrDefault(x => x.Name.LocalName == "description");
                if (descrNode != null)
                    DescriptionFromNuspec = descrNode.Value;


                var csp = XDocument.Load(Path.Combine(ProjectDir, ProjectName + ".csproj"));

                var ns_cs = csp.Root.Name.Namespace;
                var targetNet = csp.Descendants().First(x => x.Name.LocalName == "TargetFramework").Value;
                var refs = csp.Descendants().Where(x => x.Name.LocalName == "PackageReference").ToArray();

                var ns = nusp.Root.Name.Namespace;
                var md = nusp.Root.Element(ns + "metadata");
                var deps = md.Element(ns + "dependencies");

                if (deps == null)
                {
                    deps = new XElement(ns + "dependencies");
                    md.Add(deps);
                }

                deps.RemoveNodes();

                var depsfromRef = refs
                 .Select(x => new XElement(ns + "dependency",
                     new XAttribute("id", x.Attribute(ns_cs + "Include").Value),
                     new XAttribute("version", x.Attribute(ns_cs + "Version").Value)))
                 .ToList();

                deps.Add(
                    new XElement(ns + "group",
                    new XAttribute("targetFramework", targetNet),
                    depsfromRef
                    ));

                /// Удаляем настройку иконку
                var elMdIcon = md.Element(ns + "icon");
                if (elMdIcon != null)
                        elMdIcon.Remove();

                ///Получаем контейнер для файлов
                var files = nusp.Root.Element(ns + "files");

                if (files == null)
                    {
                        files = new XElement(ns + "files");
                        nusp.Root.Add(files);
                    }

                files.RemoveNodes();

                // Добавляем скомпиленные файлы

                files.Add(new XElement(ns + "file",
                    new XAttribute("src", AssemblyName + ".*"),
                    new XAttribute("exclude", "*.json"),
                    new XAttribute("target", @"lib\" + targetNet + @"\")));

                // Если есть иконка
                if (!String.IsNullOrWhiteSpace(IconPath) && File.Exists(IconPath))
                {
                    var fnIcon = Path.GetFileName(IconPath);

                    md.Add(new XElement(ns + "icon", fnIcon));

                    files.Add(new XElement(ns + "file",
                        new XAttribute("src", IconPath),
                        new XAttribute("target", @"\")));
                }

                NewNuspecFile = Path.Combine(TempBuildDir, Path.GetFileName(nuspecFile));

                if (File.Exists(NewNuspecFile))
                    File.Delete(NewNuspecFile);

                nusp.Save(NewNuspecFile);

                return true;

                ]]>
            </Code>
        </Task>
    </UsingTask>
    
    <Target Name="SetVersion" AfterTargets="BeforeBuild">

        <CreateVersions
            ProjectDir ="$(MSBuildProjectDirectory)"
            AssemblyName="$(AssemblyName)"
            ProjectName="$(ProjectName)"
            TempBuildDir ="$(BaseIntermediateOutputPath)"
            IconPath="$(PaketIcon)">

            <Output TaskParameter="ProductVersion"
                    PropertyName="ProductVersion"/>
            <Output TaskParameter="VerFile"
                    PropertyName="VerFile"/>
            <Output TaskParameter="VerAssembly"
                    PropertyName="VerAssembly"/>
            <Output TaskParameter="VerFile"
                    PropertyName="VerFile"/>
            <Output TaskParameter="DescriptionFromNuspec"
                    PropertyName="DescriptionFromNuspec"/>
            <Output TaskParameter="NewNuspecFile"
                    PropertyName="NuspecFilePath"/>
        </CreateVersions>

        <ItemGroup>
            <AssemblyAttributes Include="AssemblyTitle">
                <_Parameter1>$(AssemblyName)</_Parameter1>
            </AssemblyAttributes>
            <AssemblyAttributes Include="AssemblyVersion">
                <_Parameter1>$(VerAssembly)</_Parameter1>
            </AssemblyAttributes>
            <AssemblyAttributes Include="AssemblyFileVersion">
                <_Parameter1>$(VerFile)</_Parameter1>
            </AssemblyAttributes>
            <AssemblyAttributes Include="AssemblyInformationalVersion">
                <_Parameter1>$(ProductVersion)</_Parameter1>
            </AssemblyAttributes>
            <AssemblyAttributes Include="AssemblyDescription">
                <_Parameter1>$(DescriptionFromNuspec)</_Parameter1>
            </AssemblyAttributes>
            <AssemblyAttributes Include="AssemblyCopyright">
                <_Parameter1>Copyright $([System.DateTime]::Now.ToString("yyyy"))©</_Parameter1>
            </AssemblyAttributes>
<!--
            <AssemblyAttributes Include="AssemblyCompany">
                <_Parameter1>$()</_Parameter1>
            </AssemblyAttributes>
            <AssemblyAttributes Include="AssemblyProduct">
                <_Parameter1>My Product</_Parameter1>
            </AssemblyAttributes>
-->
        </ItemGroup>

        <MakeDir Directories="$(BaseIntermediateOutputPath)"/>
        <WriteCodeFragment Language="C#"
                            OutputFile="$(BaseIntermediateOutputPath)$(AssemblyName)_$(ProductVersion)_Version.cs"
                            AssemblyAttributes="@(AssemblyAttributes)"/>
        <ItemGroup>
            <Compile Include="$(BaseIntermediateOutputPath)$(AssemblyName)_$(ProductVersion)_Version.cs"/>
        </ItemGroup>

        <Message Text="----- Версия пакета $(ProductVersion) Версия сборки $(VerAssembly) Версия файла $(VerFile)" Importance="High"/>
    </Target>

    <Target Name="PackNuget" AfterTargets="AfterBuild">

        <PropertyGroup Condition=" '$(OutputNuget)' == '' ">
            <OutputNuget>$([System.IO.Path]::GetPathRoot($(MSBuildProjectDirectory)))localNuget</OutputNuget>
        </PropertyGroup>

        <Message Text="----- Запуск пакетирования" Importance="High"/>
        <Exec Command="&quot;$(PkgNuGet_CommandLine)\tools\NuGet.exe&quot; pack &quot;$(NuspecFilePath)&quot; -Version $(ProductVersion) -Properties Configuration=Release -OutputDirectory $(OutputNuget) -BasePath $(OutputPath)" />
    </Target>
</Project>